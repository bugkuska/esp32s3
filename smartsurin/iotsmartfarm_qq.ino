#include <Wire.h>
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h> //Blynk Library ‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô 0.6x ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö Source-code ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Library verion 1.x.x ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
#include <ModbusMaster.h>     //‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå Modbus
#include <WiFiManager.h>      //‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wi-Fi ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Hard-code ssid, password
#include <Preferences.h>

#include <TimeLib.h>    // ‚úÖ ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤
#include <WidgetRTC.h>  // ‚úÖ ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ RTC ‡∏Ç‡∏≠‡∏á Blynk
WidgetRTC rtc;          // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå RTC
// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Virtual Pin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
#define Time_VPin V7  // ‡πÄ‡∏ß‡∏•‡∏≤ (HH:MM:SS)
#define Date_VPin V8  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (DD/MM/YYYY)

// Wi-Fi and Blynk credentials
const char auth[] = "";  // Blynk Token ‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å Project ‡πÉ‡∏ô App Blynk Legacy

// GPIO Pins
#define TXD 17     //TX ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ôGPIO ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
#define RXD 18     //RX ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ôGPIO ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

//GPIO ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
#define RELAY1 1   // ‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥
#define RELAY2 2   // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Blynk
#define RELAY3 41  // ‡∏ß‡∏≤‡∏•‡πå‡∏ß 1
#define RELAY4 42  // ‡∏ß‡∏≤‡∏•‡πå‡∏ß 2

// Blynk Virtual Pins
#define Widget_Btn_SW1 V1   //‡∏™‡∏ß‡∏¥‡∏ï‡∏ã‡πå 1
#define Widget_Btn_SW2 V2   //‡∏™‡∏ß‡∏¥‡∏ï‡∏ã‡πå 2
#define Widget_Btn_SW3 V3    //‡∏™‡∏ß‡∏¥‡∏ï‡∏ã‡πå 3
#define SoilMoisture_VPin V4  // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÉ‡∏ô‡∏î‡∏¥‡∏ô
#define AutoManual_VPin V5     // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Auto/Manual
#define SoilThreshold_VPin V6  // Slider ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

// Modbus settings
ModbusMaster node1;
WiFiManager wm;
BlynkTimer timer;
Preferences preferences;

unsigned long lastBlynkConnectTime = 0;  // ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö timeout ‡∏Ç‡∏≠‡∏á Blynk

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Auto/Manual ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô
bool isAutoMode = false;
float soilThreshold = 50.0;  // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (%)
float soilMoisture = 0.0;    // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå

void checkConnections();
void readSoilMoisture();

void setup() {
  Serial.begin(115200);
  Serial2.begin(9600, SERIAL_8N1, RXD, TXD);

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≤ GPIO ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Relay
  pinMode(RELAY1, OUTPUT);
  pinMode(RELAY2, OUTPUT);
  pinMode(RELAY3, OUTPUT);
  pinMode(RELAY4, OUTPUT);

  digitalWrite(RELAY1, LOW);
  digitalWrite(RELAY2, LOW);
  digitalWrite(RELAY3, LOW);
  digitalWrite(RELAY4, LOW);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Preferences (Flash Storage)
  preferences.begin("sensor_data", false);
  isAutoMode = preferences.getBool("auto_mode", false);
  soilThreshold = preferences.getFloat("soil_threshold", 50.0);
  soilMoisture = preferences.getFloat("soil_moisture", 0.0);

  Serial.print("Loaded Auto Mode: ");
  Serial.println(isAutoMode ? "ON" : "OFF");
  Serial.print("Loaded Soil Threshold: ");
  Serial.println(soilThreshold);
  Serial.print("Loaded Soil Moisture: ");
  Serial.println(soilMoisture);

  // ‡πÄ‡∏£‡∏¥‡πà‡∏° WiFi STA mode
  WiFi.mode(WIFI_STA);
  WiFi.begin();  // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö WiFi ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ

  unsigned long startAttemptTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {
    delay(500);
    Serial.print(".");
  }

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nWiFi not connected! Starting WiFiManager...");

    wm.setCleanConnect(true);        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤ WiFi ‡πÄ‡∏î‡∏¥‡∏°
    wm.setEnableConfigPortal(true);  // ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î Portal
    wm.setConfigPortalTimeout(180);  // ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ‡∏ô‡∏≤‡∏ô 3 ‡∏ô‡∏≤‡∏ó‡∏µ
    wm.startConfigPortal("ESP32S3-Smartfarm01");

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Config
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("WiFi connected via Config Portal!");
      WiFi.mode(WIFI_STA);  // ‡∏õ‡∏¥‡∏î Hotspot
    } else {
      Serial.println("Still no WiFi. Restarting...");
      delay(3000);
      ESP.restart();
    }
  }

  Serial.println("\nWi-Fi connected!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  WiFi.mode(WIFI_STA);  // ‡∏õ‡∏¥‡∏î AP ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô

  lastBlynkConnectTime = millis();

  // ‡πÉ‡∏ä‡πâ Blynk ‡πÅ‡∏ö‡∏ö non-blocking
  Blynk.config(auth, "blynk-local-server", port); //‡πÅ‡∏Å‡πâ blynk-local-server ‡πÅ‡∏•‡∏∞ port 
  Blynk.connect();

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Blynk RTC
  rtc.begin();

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Modbus Sensor (ID1)
  node1.begin(1, Serial2);

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
  timer.setInterval(10000L, checkConnections);     // ‡πÄ‡∏ä‡πá‡∏Ñ Wi-Fi ‡πÅ‡∏•‡∏∞ Blynk ‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥
  timer.setInterval(15000L, readSoilMoisture);     // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ó‡∏∏‡∏Å 15 ‡∏ß‡∏¥
  timer.setInterval(10000L, sendDateTimeToBlynk);  // ‡∏™‡πà‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏õ Blynk ‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥
}

// ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Blynk ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
BLYNK_CONNECTED() {
  Serial.println("Blynk connected! Synchronizing virtual pins...");

  // ‚úÖ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå Blynk
  Blynk.syncVirtual(AutoManual_VPin);
  Blynk.syncVirtual(SoilThreshold_VPin);
  Blynk.syncVirtual(Widget_Btn_SW1);
  Blynk.syncVirtual(Widget_Btn_SW2);
  Blynk.syncVirtual(Widget_Btn_SW3);
  Blynk.syncVirtual(SoilMoisture_VPin);

  digitalWrite(RELAY2, HIGH);  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤ Blynk ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î Auto/Manual ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Flash Storage
  isAutoMode = preferences.getBool("auto_mode", false);

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° Auto/Manual ‡πÉ‡∏ô Blynk
  Blynk.virtualWrite(AutoManual_VPin, isAutoMode);

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏•‡πå‡∏ß ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤ Relay ‡∏à‡∏£‡∏¥‡∏á
  Blynk.virtualWrite(Widget_Btn_SW1, digitalRead(RELAY1));
  Blynk.virtualWrite(Widget_Btn_SW2, digitalRead(RELAY3));
  Blynk.virtualWrite(Widget_Btn_SW3, digitalRead(RELAY4));

  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Serial Monitor
  Serial.print("Loaded Auto Mode: ");
  Serial.println(isAutoMode ? "Auto" : "Manual");

  Serial.print("Relay1 (Pump): ");
  Serial.println(digitalRead(RELAY1) ? "ON" : "OFF");

  Serial.print("Relay3 (Valve 1): ");
  Serial.println(digitalRead(RELAY3) ? "ON" : "OFF");

  Serial.print("Relay4 (Valve 2): ");
  Serial.println(digitalRead(RELAY4) ? "ON" : "OFF");

  Serial.println("Blynk connected! Synchronizing RTC...");
  rtc.begin();                // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ RTC ‡∏Ç‡∏≠‡∏á Blynk
  Blynk.syncVirtual(V7, V8);  // ‚úÖ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å Blynk
  setSyncInterval(600);       // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ
}

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Wi-Fi ‡πÅ‡∏•‡∏∞ Blynk ‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
void checkConnections() {
  // üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Wi-Fi
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Wi-Fi disconnected! Attempting reconnect...");

    WiFi.disconnect();
    WiFi.mode(WIFI_STA);
    WiFi.begin();

    unsigned long startAttemptTime = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 5000) {
      delay(500);
      Serial.print(".");
    }

    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("\nReconnect failed. Launching Config Portal...");

      wm.setEnableConfigPortal(true);
      wm.setConfigPortalTimeout(120);  // ‡πÄ‡∏õ‡∏¥‡∏î Hotspot ‡πÅ‡∏Ñ‡πà 2 ‡∏ô‡∏≤‡∏ó‡∏µ
      wm.startConfigPortal("ESP32S3-Smartfarm01");

      if (WiFi.status() == WL_CONNECTED) {
        Serial.println("WiFi connected via Config Portal!");
        WiFi.mode(WIFI_STA);  // ‡∏õ‡∏¥‡∏î Hotspot
      } else {
        Serial.println("WiFi still not connected.");
      }
    } else {
      Serial.println("\nWi-Fi Reconnected!");
      WiFi.mode(WIFI_STA);
    }
  }

  // üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Blynk
  if (!Blynk.connected()) {
    Serial.println("Blynk disconnected! Attempting to reconnect...");
    Blynk.connect();

    if (millis() - lastBlynkConnectTime > 120000) {
      Serial.println("Blynk reconnect timeout. Restarting device...");
      ESP.restart();
    }

    digitalWrite(RELAY2, LOW);  // ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  } else {
    if (millis() - lastBlynkConnectTime > 2000) {
      Serial.println("Blynk reconnected successfully.");
    }

    digitalWrite(RELAY2, HIGH);
    lastBlynkConnectTime = millis();
  }
}

// ‚úÖ ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Relay1 (‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥) ‡πÉ‡∏ô Manual Mode
BLYNK_WRITE(Widget_Btn_SW1) {
  if (!isAutoMode) {
    int state = param.asInt();
    digitalWrite(RELAY1, state);
  }
}

// ‚úÖ ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Relay3 (‡∏ß‡∏≤‡∏•‡πå‡∏ß 1) ‡πÉ‡∏ô Manual Mode
BLYNK_WRITE(Widget_Btn_SW2) {
  if (!isAutoMode) {
    int state = param.asInt();
    digitalWrite(RELAY3, state);
  }
}

// ‚úÖ ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Relay4 (‡∏ß‡∏≤‡∏•‡πå‡∏ß 2) ‡πÉ‡∏ô Manual Mode
BLYNK_WRITE(Widget_Btn_SW3) {
  if (!isAutoMode) {
    int state = param.asInt();
    digitalWrite(RELAY4, state);
  }
}

// ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î Auto/Manual ‡∏à‡∏≤‡∏Å Eventor ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏° Blynk
BLYNK_WRITE(AutoManual_VPin) {
  isAutoMode = param.asInt();  // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Eventor ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏∏‡πà‡∏° Blynk
  Serial.print("Mode changed to: ");
  Serial.println(isAutoMode ? "Auto" : "Manual");

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏•‡∏á Flash Storage
  preferences.putBool("auto_mode", isAutoMode);

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Manual Mode ‚Üí ‡∏õ‡∏¥‡∏î‡∏õ‡∏±‡πä‡∏°‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏•‡πå‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  if (!isAutoMode) {
    digitalWrite(RELAY1, LOW);  // ‡∏õ‡∏¥‡∏î‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥
    digitalWrite(RELAY3, LOW);  // ‡∏õ‡∏¥‡∏î‡∏ß‡∏≤‡∏•‡πå‡∏ß 1
    digitalWrite(RELAY4, LOW);  // ‡∏õ‡∏¥‡∏î‡∏ß‡∏≤‡∏•‡πå‡∏ß 2

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô Blynk ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå
    Blynk.virtualWrite(Widget_Btn_SW1, 0);
    Blynk.virtualWrite(Widget_Btn_SW2, 0);
    Blynk.virtualWrite(Widget_Btn_SW3, 0);

    Serial.println("Switched to Manual Mode: All pumps and valves turned OFF.");
  }

  // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà Blynk ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°
  Blynk.virtualWrite(AutoManual_VPin, isAutoMode);
}

// ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Slider (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
BLYNK_WRITE(SoilThreshold_VPin) {
  soilThreshold = param.asFloat();
  Serial.print("Soil Moisture Threshold set to: ");
  Serial.print(soilThreshold);
  Serial.println(" %");

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á Flash Storage
  preferences.putFloat("soil_threshold", soilThreshold);
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÉ‡∏ô‡∏î‡∏¥‡∏ô
void readSoilMoisture() {
  uint8_t result;
  Serial.println("Reading Soil Moisture...");

  result = node1.readHoldingRegisters(0x0000, 3);
  if (result == node1.ku8MBSuccess) {
    float newSoilMoisture = node1.getResponseBuffer(2) / 10.0f;

    if (newSoilMoisture >= 0.0 && newSoilMoisture <= 100.0) {
      soilMoisture = newSoilMoisture;

      Serial.print("Soil Moisture: ");
      Serial.print(soilMoisture);
      Serial.println(" %");

      Blynk.virtualWrite(SoilMoisture_VPin, soilMoisture);

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏•‡∏á Flash Storage
      preferences.putFloat("soil_moisture", soilMoisture);

      // ‚úÖ ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏•‡πå‡∏ß‡πÉ‡∏ô Auto Mode
      if (isAutoMode) {
        if (soilMoisture < soilThreshold) {
          Serial.println("Soil moisture is LOW, turning ON pump and valve.");
          digitalWrite(RELAY1, HIGH);
          digitalWrite(RELAY3, HIGH);

          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô Blynk
          Blynk.virtualWrite(Widget_Btn_SW1, 1);  // ‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥: ‡πÄ‡∏õ‡∏¥‡∏î
          Blynk.virtualWrite(Widget_Btn_SW2, 1);  // ‡∏ß‡∏≤‡∏•‡πå‡∏ß 1: ‡πÄ‡∏õ‡∏¥‡∏î
        } else {
          Serial.println("Soil moisture is OK, turning OFF pump and valve.");
          digitalWrite(RELAY1, LOW);
          digitalWrite(RELAY3, LOW);

          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô Blynk
          Blynk.virtualWrite(Widget_Btn_SW1, 0);  // ‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥: ‡∏õ‡∏¥‡∏î
          Blynk.virtualWrite(Widget_Btn_SW2, 0);  // ‡∏ß‡∏≤‡∏•‡πå‡∏ß 1: ‡∏õ‡∏¥‡∏î
        }
      }
    }
  } else {
    Serial.println("Failed to read Soil Moisture data!");
  }
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ó‡∏µ‡πà Blynk
void sendDateTimeToBlynk() {
  if (Blynk.connected() && year() > 1970) {  // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß
    char timeBuffer[10], dateBuffer[15];

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å RTC
    int currentHour = hour();
    int currentMinute = minute();
    int currentSecond = second();
    int currentDay = day();
    int currentMonth = month();
    int currentYear = year();

    // ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ (HH:MM:SS)
    sprintf(timeBuffer, "%02d:%02d:%02d", currentHour, currentMinute, currentSecond);

    // ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (DD/MM/YYYY)
    sprintf(dateBuffer, "%02d/%02d/%04d", currentDay, currentMonth, currentYear);

    // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà Blynk
    Blynk.virtualWrite(Time_VPin, timeBuffer);
    Blynk.virtualWrite(Date_VPin, dateBuffer);

    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏ô Serial Monitor
    Serial.print("Time: ");
    Serial.println(timeBuffer);
    Serial.print("Date: ");
    Serial.println(dateBuffer);
  } else {
    Serial.println("RTC not synced yet...");
  }
}

// ‚úÖ ‡∏ü‡∏±‡πà‡∏á‡∏ä‡∏±‡πà‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö
void loop() {
  if (Blynk.connected()) {
    Blynk.run();
  }
  timer.run();

  Serial.print("Current Mode: ");
  Serial.println(isAutoMode ? "Auto" : "Manual");

  delay(1000);
}
